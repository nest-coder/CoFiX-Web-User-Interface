/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface INestPriceFacadeInterface extends ethers.utils.Interface {
  functions: {
    'setConfig(tuple)': FunctionFragment
    'getConfig()': FunctionFragment
    'setAddressFlag(address,uint256)': FunctionFragment
    'getAddressFlag(address)': FunctionFragment
    'setNestQuery(address,address)': FunctionFragment
    'getNestQuery(address)': FunctionFragment
    'getTokenFee(address)': FunctionFragment
    'settle(address)': FunctionFragment
    'triggeredPrice(address,address)': FunctionFragment
    'triggeredPriceInfo(address,address)': FunctionFragment
    'findPrice(address,uint256,address)': FunctionFragment
    'latestPrice(address,address)': FunctionFragment
    'lastPriceList(address,uint256,address)': FunctionFragment
    'latestPriceAndTriggeredPriceInfo(address,address)': FunctionFragment
    'triggeredPrice2(address,address)': FunctionFragment
    'triggeredPriceInfo2(address,address)': FunctionFragment
    'latestPrice2(address,address)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'setConfig',
    values: [
      {
        singleFee: BigNumberish
        doubleFee: BigNumberish
        normalFlag: BigNumberish
      }
    ]
  ): string
  encodeFunctionData(functionFragment: 'getConfig', values?: undefined): string
  encodeFunctionData(functionFragment: 'setAddressFlag', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'getAddressFlag', values: [string]): string
  encodeFunctionData(functionFragment: 'setNestQuery', values: [string, string]): string
  encodeFunctionData(functionFragment: 'getNestQuery', values: [string]): string
  encodeFunctionData(functionFragment: 'getTokenFee', values: [string]): string
  encodeFunctionData(functionFragment: 'settle', values: [string]): string
  encodeFunctionData(functionFragment: 'triggeredPrice', values: [string, string]): string
  encodeFunctionData(functionFragment: 'triggeredPriceInfo', values: [string, string]): string
  encodeFunctionData(functionFragment: 'findPrice', values: [string, BigNumberish, string]): string
  encodeFunctionData(functionFragment: 'latestPrice', values: [string, string]): string
  encodeFunctionData(functionFragment: 'lastPriceList', values: [string, BigNumberish, string]): string
  encodeFunctionData(functionFragment: 'latestPriceAndTriggeredPriceInfo', values: [string, string]): string
  encodeFunctionData(functionFragment: 'triggeredPrice2', values: [string, string]): string
  encodeFunctionData(functionFragment: 'triggeredPriceInfo2', values: [string, string]): string
  encodeFunctionData(functionFragment: 'latestPrice2', values: [string, string]): string

  decodeFunctionResult(functionFragment: 'setConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setAddressFlag', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAddressFlag', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setNestQuery', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getNestQuery', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getTokenFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'settle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'triggeredPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'triggeredPriceInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'findPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'latestPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'lastPriceList', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'latestPriceAndTriggeredPriceInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'triggeredPrice2', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'triggeredPriceInfo2', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'latestPrice2', data: BytesLike): Result

  events: {}
}

export class INestPriceFacade extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: INestPriceFacadeInterface

  functions: {
    setConfig(
      config: {
        singleFee: BigNumberish
        doubleFee: BigNumberish
        normalFlag: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getConfig(overrides?: CallOverrides): Promise<
      [
        [number, number, number] & {
          singleFee: number
          doubleFee: number
          normalFlag: number
        }
      ]
    >

    setAddressFlag(
      addr: string,
      flag: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getAddressFlag(addr: string, overrides?: CallOverrides): Promise<[BigNumber]>

    setNestQuery(
      tokenAddress: string,
      nestQueryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getNestQuery(tokenAddress: string, overrides?: CallOverrides): Promise<[string]>

    getTokenFee(tokenAddress: string, overrides?: CallOverrides): Promise<[BigNumber]>

    settle(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    triggeredPrice(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    triggeredPriceInfo(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    findPrice(
      tokenAddress: string,
      height: BigNumberish,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    latestPrice(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    lastPriceList(
      tokenAddress: string,
      count: BigNumberish,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    latestPriceAndTriggeredPriceInfo(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    triggeredPrice2(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    triggeredPriceInfo2(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    latestPrice2(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  setConfig(
    config: {
      singleFee: BigNumberish
      doubleFee: BigNumberish
      normalFlag: BigNumberish
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getConfig(overrides?: CallOverrides): Promise<
    [number, number, number] & {
      singleFee: number
      doubleFee: number
      normalFlag: number
    }
  >

  setAddressFlag(
    addr: string,
    flag: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getAddressFlag(addr: string, overrides?: CallOverrides): Promise<BigNumber>

  setNestQuery(
    tokenAddress: string,
    nestQueryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getNestQuery(tokenAddress: string, overrides?: CallOverrides): Promise<string>

  getTokenFee(tokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>

  settle(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  triggeredPrice(
    tokenAddress: string,
    paybackAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  triggeredPriceInfo(
    tokenAddress: string,
    paybackAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  findPrice(
    tokenAddress: string,
    height: BigNumberish,
    paybackAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  latestPrice(
    tokenAddress: string,
    paybackAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  lastPriceList(
    tokenAddress: string,
    count: BigNumberish,
    paybackAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  latestPriceAndTriggeredPriceInfo(
    tokenAddress: string,
    paybackAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  triggeredPrice2(
    tokenAddress: string,
    paybackAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  triggeredPriceInfo2(
    tokenAddress: string,
    paybackAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  latestPrice2(
    tokenAddress: string,
    paybackAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    setConfig(
      config: {
        singleFee: BigNumberish
        doubleFee: BigNumberish
        normalFlag: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<void>

    getConfig(overrides?: CallOverrides): Promise<
      [number, number, number] & {
        singleFee: number
        doubleFee: number
        normalFlag: number
      }
    >

    setAddressFlag(addr: string, flag: BigNumberish, overrides?: CallOverrides): Promise<void>

    getAddressFlag(addr: string, overrides?: CallOverrides): Promise<BigNumber>

    setNestQuery(tokenAddress: string, nestQueryAddress: string, overrides?: CallOverrides): Promise<void>

    getNestQuery(tokenAddress: string, overrides?: CallOverrides): Promise<string>

    getTokenFee(tokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    settle(tokenAddress: string, overrides?: CallOverrides): Promise<void>

    triggeredPrice(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }>

    triggeredPriceInfo(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber
        price: BigNumber
        avgPrice: BigNumber
        sigmaSQ: BigNumber
      }
    >

    findPrice(
      tokenAddress: string,
      height: BigNumberish,
      paybackAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }>

    latestPrice(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }>

    lastPriceList(
      tokenAddress: string,
      count: BigNumberish,
      paybackAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    latestPriceAndTriggeredPriceInfo(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        latestPriceBlockNumber: BigNumber
        latestPriceValue: BigNumber
        triggeredPriceBlockNumber: BigNumber
        triggeredPriceValue: BigNumber
        triggeredAvgPrice: BigNumber
        triggeredSigmaSQ: BigNumber
      }
    >

    triggeredPrice2(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber
        price: BigNumber
        ntokenBlockNumber: BigNumber
        ntokenPrice: BigNumber
      }
    >

    triggeredPriceInfo2(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber
        price: BigNumber
        avgPrice: BigNumber
        sigmaSQ: BigNumber
        ntokenBlockNumber: BigNumber
        ntokenPrice: BigNumber
        ntokenAvgPrice: BigNumber
        ntokenSigmaSQ: BigNumber
      }
    >

    latestPrice2(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber
        price: BigNumber
        ntokenBlockNumber: BigNumber
        ntokenPrice: BigNumber
      }
    >
  }

  filters: {}

  estimateGas: {
    setConfig(
      config: {
        singleFee: BigNumberish
        doubleFee: BigNumberish
        normalFlag: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getConfig(overrides?: CallOverrides): Promise<BigNumber>

    setAddressFlag(
      addr: string,
      flag: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getAddressFlag(addr: string, overrides?: CallOverrides): Promise<BigNumber>

    setNestQuery(
      tokenAddress: string,
      nestQueryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getNestQuery(tokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    getTokenFee(tokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    settle(tokenAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    triggeredPrice(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    triggeredPriceInfo(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    findPrice(
      tokenAddress: string,
      height: BigNumberish,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    latestPrice(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    lastPriceList(
      tokenAddress: string,
      count: BigNumberish,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    latestPriceAndTriggeredPriceInfo(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    triggeredPrice2(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    triggeredPriceInfo2(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    latestPrice2(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    setConfig(
      config: {
        singleFee: BigNumberish
        doubleFee: BigNumberish
        normalFlag: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setAddressFlag(
      addr: string,
      flag: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getAddressFlag(addr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    setNestQuery(
      tokenAddress: string,
      nestQueryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getNestQuery(tokenAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getTokenFee(tokenAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    settle(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    triggeredPrice(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    triggeredPriceInfo(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    findPrice(
      tokenAddress: string,
      height: BigNumberish,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    latestPrice(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    lastPriceList(
      tokenAddress: string,
      count: BigNumberish,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    latestPriceAndTriggeredPriceInfo(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    triggeredPrice2(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    triggeredPriceInfo2(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    latestPrice2(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
